#!/usr/bin/env python
# encoding: utf-8

import argparse
import numpy as np

eps = 1e-5


def main(args):
    nodes = {}      # v -> (label, pr)
    edges = set()   # set of (src, dst)'s

    with open(args.pr0) as f:
        for line in f:
            line = line.strip().split('\t')
            pr = float(line[1])
            nodes[line[0]] = 'Left', pr

    with open(args.pr1) as f:
        for line in f:
            line = line.strip().split('\t')
            newpr = float(line[1])
            oldpr = nodes[line[0]][1] if line[0] in nodes else 0.
            if newpr - oldpr > 0:
                nodes[line[0]] = 'Right', newpr

    with open(args.adj) as f:
        for line in f:
            dsts = line.strip('\n').split('\t')
            src = dsts.pop(0)
            if src not in nodes:
                nodes[src] = 'Neutral', eps
            for dst in dsts:
                edges.add((src, dst))
                if dst not in nodes:
                    nodes[dst] = 'Neutral', eps

    print 'nodedef>name VARCHAR,class VARCHAR, pagerank FLOAT'
    for v, (l, pr) in nodes.iteritems():
        print '%s,%s,%f' % (v, l, pr)

    print 'edgedef>node1 VARCHAR,node2 VARCHAR'
    for u, v in edges:
        print '%s,%s' % (u, v)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Given xx.adj, xx-0.pr, and xx-1.pr, '
                                                 'print xx.gdf to stdout.')
    parser.add_argument('adj',
                        help='Outlinks of the graph (xx.adj).')
    parser.add_argument('pr0',
                        help='Sub-graph generated by seed 0 (xx-0.pr).')
    parser.add_argument('pr1',
                        help='Sub-graph generated by seed 1 (xx-1.pr).')
    main(parser.parse_args())

